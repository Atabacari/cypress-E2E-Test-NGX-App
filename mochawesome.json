{
  "stats": {
    "suites": 6,
    "tests": 24,
    "passes": 24,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 24,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2024-10-23T19:05:04.247Z",
    "end": "2024-10-23T19:06:21.382Z",
    "duration": 77135
  },
  "results": [
    {
      "uuid": "2bf347e8-c131-4c76-a2a7-16d6ed5fe147",
      "title": "",
      "fullFile": "cypress/e2e/datepickerPageTest.spec.js",
      "file": "cypress/e2e/datepickerPageTest.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "506734fe-6e93-4b50-8ead-4ff2d422d9a6",
          "title": "Datepicker Page Test Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should display the calendar and allow date selection",
              "fullTitle": "Datepicker Page Test Suite should display the calendar and allow date selection",
              "timedOut": null,
              "duration": 2140,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Open the calendar.\n// Select a specific date.\n// Verify that the selected date is displayed correctly.\nconst day = '15';\nconst dateToValidate = 'Oct 15, 2024';\n// Find and click the calendar input or trigger\n_datepickerPage.datepickerPage.openCalendar(CALENDAR_INDEX.PICKER);\n// Ensure that the nb-calendar element is visible\n_datepickerPage.datepickerPage.calendar().should('be.visible');\n// Select a specific date (e.g., 15th of the current month)\n_datepickerPage.datepickerPage.selectDate(day);\n// Verify that the selected date is displayed in the input field\n_datepickerPage.datepickerPage.inputCalendar(CALENDAR_INDEX.PICKER).should('have.value', dateToValidate);",
              "err": {},
              "uuid": "10df78de-cb6d-4f51-8dcd-89c326e6b7b2",
              "parentUUID": "506734fe-6e93-4b50-8ead-4ff2d422d9a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should navigate between months",
              "fullTitle": "Datepicker Page Test Suite should navigate between months",
              "timedOut": null,
              "duration": 1389,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Open the calendar and navigate between months using the navigation buttons.\n// Verify that the month changes accordingly.\n// Get the current month and format it as \"MMM D, YYYY\"\nconst optionsMonth = {\n  month: 'short',\n  year: 'numeric'\n};\nconst today = new Date();\nconst formattedTodayMonth = today.toLocaleDateString('en-US', optionsMonth); // Example output: \"Oct 2024\"\n//Get the next month and format it as \"MMM YYYY\" \nconst nextMonth = new Date(today.setMonth(today.getMonth() + 1));\nconst formattedNextMonth = nextMonth.toLocaleDateString('en-US', optionsMonth);\n// Open the calendar\n_datepickerPage.datepickerPage.openCalendar(CALENDAR_INDEX.PICKER);\n// Verify the current month in the(assuming October 2024 as an example)\n_datepickerPage.datepickerPage.buttonCalendar().should('contain', formattedTodayMonth);\n// Click on the \"next month\" button\n_datepickerPage.datepickerPage.navigateNextMonth();\n// Verify that the calendar header has changed to the next month and the same year \n_datepickerPage.datepickerPage.buttonCalendar().should('contain', formattedNextMonth);\n// Click on the \"previous month\" button\n_datepickerPage.datepickerPage.navigatePrevMonth();\n// Verify that the month is back to the current month\n_datepickerPage.datepickerPage.buttonCalendar().should('contain', formattedTodayMonth);",
              "err": {},
              "uuid": "e2666c05-8079-4bc8-8cad-ae56f98cf53f",
              "parentUUID": "506734fe-6e93-4b50-8ead-4ff2d422d9a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow year navigation and date selection",
              "fullTitle": "Datepicker Page Test Suite should allow year navigation and date selection",
              "timedOut": null,
              "duration": 1427,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Open the year picker.\n// Select a year and verify the correct year is displayed.\n// Select a date from the chosen year.\n// Open the calendar\n_datepickerPage.datepickerPage.openCalendar(CALENDAR_INDEX.PICKER);\n// Click on the year navigation (to change the year)\n_datepickerPage.datepickerPage.buttonCalendar().click();\n// Select the year 2023\n_datepickerPage.datepickerPage.selectYear(2023);\n// Select the month October\n_datepickerPage.datepickerPage.selectMonth('Oct');\n// Select a specific date (e.g., 15th of October 2023)\n_datepickerPage.datepickerPage.selectDate(15);\n// Verify the selected date is correct\n_datepickerPage.datepickerPage.inputCalendar(CALENDAR_INDEX.PICKER).should('have.value', 'Oct 15, 2023');",
              "err": {},
              "uuid": "99f863cd-075f-471c-91d2-b7e18ed9a7ad",
              "parentUUID": "506734fe-6e93-4b50-8ead-4ff2d422d9a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should select a date range",
              "fullTitle": "Datepicker Page Test Suite should select a date range",
              "timedOut": null,
              "duration": 1242,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Select a range of dates \n// Verify the correct range is displayed.\n// Get the current month and year in the format it as \"MMM YYYY\"\nconst currentMonth = new Date().toLocaleDateString('en-US', {\n  month: 'short'\n});\nconst currentYear = new Date().toLocaleDateString('en-US', {\n  year: 'numeric'\n});\n// Set start and end day\nconst startDay = '10';\nconst endDay = '20';\nconst expectedStartRange = currentMonth + ' ' + startDay + ', ' + currentYear;\nconst expectedEndRange = currentMonth + ' ' + endDay + ', ' + currentYear;\n// Open the calendar\n_datepickerPage.datepickerPage.openCalendar(CALENDAR_INDEX.RANGE);\n// Select the start date\n_datepickerPage.datepickerPage.selectDate(startDay);\n// Get the start date from the input form\n_datepickerPage.datepickerPage.inputCalendar(CALENDAR_INDEX.RANGE).invoke('val').then(value => {\n  const startDate = value;\n  expect(value).to.equal(expectedStartRange);\n});\n// Select the end date\n_datepickerPage.datepickerPage.selectDate(endDay);\n// Get the start date from the input form\n_datepickerPage.datepickerPage.inputCalendar(CALENDAR_INDEX.RANGE).invoke('val').then(value => {\n  const range = value;\n  //Verify that the date range is displayed correctly in the input field\n  expect(value).to.equal(expectedStartRange + ' - ' + expectedEndRange);\n});",
              "err": {},
              "uuid": "2e2b3752-d25b-4e69-a657-f5097221f507",
              "parentUUID": "506734fe-6e93-4b50-8ead-4ff2d422d9a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow selecting a disabled date",
              "fullTitle": "Datepicker Page Test Suite should not allow selecting a disabled date",
              "timedOut": null,
              "duration": 1210,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Disabled Dates**:\n// Ensure that specific dates  are disabled and cannot be selected.\nlet disabledDay;\n// Open the calendar\n_datepickerPage.datepickerPage.openCalendar(CALENDAR_INDEX.DISABLED);\n// Find a disabled date and click it\n_datepickerPage.datepickerPage.disabledDate().click({\n  force: true\n});\n_datepickerPage.datepickerPage.disabledDate().should('have.class', 'disabled') // Ensure the date is still disabled\n.and('not.have.class', 'selected'); // Ensure the date cannot be selected\n// Verify that the input value did not change (i.e., no date was selected)\n_datepickerPage.datepickerPage.inputCalendar(CALENDAR_INDEX.DISABLED).should('have.value', '');",
              "err": {},
              "uuid": "12748902-3619-4dd4-9722-c2257b033708",
              "parentUUID": "506734fe-6e93-4b50-8ead-4ff2d422d9a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should allow selecting enabled dates and not disabled dates",
              "fullTitle": "Datepicker Page Test Suite should allow selecting enabled dates and not disabled dates",
              "timedOut": null,
              "duration": 1462,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Open the calendar component.\n// Select an enabled (active) date.\n// Verify that the enabled date is selected.\n// Try to select a disabled date and verify that it remains unselected.\n// Open the calendar\n_datepickerPage.datepickerPage.openCalendar(CALENDAR_INDEX.DISABLED);\n// Select an enabled date\n_datepickerPage.datepickerPage.enabledDate().click();\n// Verify the date is selected\n_datepickerPage.datepickerPage.inputCalendar(CALENDAR_INDEX.DISABLED).should('not.have.value', '');\n// Open the calendar\n_datepickerPage.datepickerPage.openCalendar(CALENDAR_INDEX.DISABLED);\n// Try to select a disabled date\n_datepickerPage.datepickerPage.disabledDate().click({\n  force: true\n});\n// Verify the disabled date is not selected\n_datepickerPage.datepickerPage.disabledDate().should('not.have.class', 'selected');",
              "err": {},
              "uuid": "55e742bc-bc2b-446b-8ae4-358055079944",
              "parentUUID": "506734fe-6e93-4b50-8ead-4ff2d422d9a6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should keep disabled dates after navigating to next/previous month",
              "fullTitle": "Datepicker Page Test Suite should keep disabled dates after navigating to next/previous month",
              "timedOut": null,
              "duration": 1279,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//  Open the calendar component.\n//  Navigate to the next month.\n//  Verify that disabled dates in the next month are still disabled.\n//  Repeat the test for the previous month.\n//  Open the calendar component.\n_datepickerPage.datepickerPage.openCalendar(CALENDAR_INDEX.DISABLED);\n// Navigate to the next month\n_datepickerPage.datepickerPage.navigateNextMonth();\n_datepickerPage.datepickerPage.calendar().find('.disabled').should('exist');\n// Navigate to the previous month\n_datepickerPage.datepickerPage.navigatePrevMonth();\n_datepickerPage.datepickerPage.calendar().find('.disabled').should('exist');",
              "err": {},
              "uuid": "9d3c0c09-f627-46b4-80b2-ea733dea9ea9",
              "parentUUID": "506734fe-6e93-4b50-8ead-4ff2d422d9a6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "10df78de-cb6d-4f51-8dcd-89c326e6b7b2",
            "e2666c05-8079-4bc8-8cad-ae56f98cf53f",
            "99f863cd-075f-471c-91d2-b7e18ed9a7ad",
            "2e2b3752-d25b-4e69-a657-f5097221f507",
            "12748902-3619-4dd4-9722-c2257b033708",
            "55e742bc-bc2b-446b-8ae4-358055079944",
            "9d3c0c09-f627-46b4-80b2-ea733dea9ea9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10149,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "079fe822-f559-44d9-9d8c-b6d69c7c2fe3",
      "title": "",
      "fullFile": "cypress/e2e/dialogPageTest.spec.js",
      "file": "cypress/e2e/dialogPageTest.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "174a20e0-be93-413d-aa30-bf22f2c3dc0d",
          "title": "Dialog Page Test Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should open the dialog when the button is clicked",
              "fullTitle": "Dialog Page Test Suite should open the dialog when the button is clicked",
              "timedOut": null,
              "duration": 2088,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const titleCard = \"Open Dialog\";\nconst titleButton = \"Open Dialog with component\";\n// Open dialog and validate its visibility\n_dialogPage.dialogPage.openDialog(titleCard, titleButton);\n_dialogPage.dialogPage.dialogContainer().should('be.visible');\n// Validate the dialog title\n_dialogPage.dialogPage.dialogTitel().should('contain', 'This is a title passed to the dialog component');\n// Close the dialog and verify it's closed\n_dialogPage.dialogPage.dismissDialog();\n_dialogPage.dialogPage.dialogContainer().should('not.exist');",
              "err": {},
              "uuid": "9271d81b-56b7-4b29-bd35-6988ed966c45",
              "parentUUID": "174a20e0-be93-413d-aa30-bf22f2c3dc0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should close the dialog when the backdrop is clicked",
              "fullTitle": "Dialog Page Test Suite should close the dialog when the backdrop is clicked",
              "timedOut": null,
              "duration": 1212,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const titleCard = \"Open Without Backdrop\";\nconst titleButton = \"Open Dialog with backdrop\";\n// Open dialog and validate its visibility\n_dialogPage.dialogPage.openDialog(titleCard, titleButton);\n_dialogPage.dialogPage.dialogContainer().should('be.visible');\n// Click the backdrop to close the dialog and verify it's closed\ncy.get('.cdk-overlay-backdrop').click({\n  force: true\n});\n_dialogPage.dialogPage.dialogContainer().should('not.exist');",
              "err": {},
              "uuid": "e3e16def-f65e-4b4d-a41e-37e4f64907ff",
              "parentUUID": "174a20e0-be93-413d-aa30-bf22f2c3dc0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should close the dialog when the close button is clicked",
              "fullTitle": "Dialog Page Test Suite should close the dialog when the close button is clicked",
              "timedOut": null,
              "duration": 1211,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const titleCard = \"Open Without Backdrop\";\nconst titleButton = \"Open Dialog without backdrop\";\n// Open dialog and validate its visibility\n_dialogPage.dialogPage.openDialog(titleCard, titleButton);\n_dialogPage.dialogPage.dialogContainer().should('be.visible');\n// Verify there's no backdrop for this dialog\ncy.get('div .content').should('not.contain', '.cdk-overlay-backdrop');\n// Close the dialog using the close button and verify it's closed\n_dialogPage.dialogPage.closeDialog();\n_dialogPage.dialogPage.dialogContainer().should('not.exist');",
              "err": {},
              "uuid": "aa91135b-109d-451e-b499-b5e56bb99573",
              "parentUUID": "174a20e0-be93-413d-aa30-bf22f2c3dc0d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should submit the form successfully with valid data",
              "fullTitle": "Dialog Page Test Suite should submit the form successfully with valid data",
              "timedOut": null,
              "duration": 3173,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const titleCard = \"Return Result From Dialog\";\nconst titleButton = \"Enter Name\";\nconst names = [\"Tim\", \"John\", \"Lars\"];\nnames.forEach(name => {\n  // Open dialog, fill the form, and submit it\n  _dialogPage.dialogPage.openDialog(titleCard, titleButton);\n  _dialogPage.dialogPage.dialogContainer().should('be.visible');\n  // Input name and submit form\n  _dialogPage.dialogPage.inputName(name);\n  _dialogPage.dialogPage.clickSubmitButton();\n  // Verify the dialog is closed after submission\n  _dialogPage.dialogPage.dialogContainer().should('not.exist');\n});\n// Verify all names were correctly saved\n_dialogPage.dialogPage.checkData(titleCard, names);",
              "err": {},
              "uuid": "e2c516f8-d845-4ecc-a946-e38e032f9de0",
              "parentUUID": "174a20e0-be93-413d-aa30-bf22f2c3dc0d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9271d81b-56b7-4b29-bd35-6988ed966c45",
            "e3e16def-f65e-4b4d-a41e-37e4f64907ff",
            "aa91135b-109d-451e-b499-b5e56bb99573",
            "e2c516f8-d845-4ecc-a946-e38e032f9de0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7684,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "14b159ee-4ea5-455d-9f14-9d6280f908e5",
      "title": "",
      "fullFile": "cypress/e2e/formLayoutsPageTest.spec.js",
      "file": "cypress/e2e/formLayoutsPageTest.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "edf36edc-4e77-4c60-b954-959c73b03247",
          "title": "Form layouts test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should submit Inline form",
              "fullTitle": "Form layouts test should submit Inline form",
              "timedOut": null,
              "duration": 5029,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const form = \"Inline form\"; //Form title used to locate the correct form card\n// Fill in the \"Name\" input field\n_formLayoutsPage.formLayoutsPage.inputName(form).type(fullName);\n// Fill in the \"Email\" input field\n_formLayoutsPage.formLayoutsPage.inputEmail(form).type(email);\n// Check the checkbox\n_formLayoutsPage.formLayoutsPage.clickCheckbox(form);\n// Submit the form\n_formLayoutsPage.formLayoutsPage.clickSubmit(form);",
              "err": {},
              "uuid": "82482383-107c-4eee-960f-10730287e100",
              "parentUUID": "edf36edc-4e77-4c60-b954-959c73b03247",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should sign in Using the Grid and select radio buttons",
              "fullTitle": "Form layouts test should sign in Using the Grid and select radio buttons",
              "timedOut": null,
              "duration": 4785,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const form = \"Using the Grid\"; // Form title used to locate the correct form card\n// Fill in the \"Email\" input field with a valid email address\n_formLayoutsPage.formLayoutsPage.inputEmail(form).type(email);\n// Fill in the \"Password\" input field with a valid password\n_formLayoutsPage.formLayoutsPage.inputPassword(form).type(password);\n// Select the first radio button (Option 1)\n_formLayoutsPage.formLayoutsPage.selectRadioButtonByIndex(form, 0);\n// Verify that the first radio button (Option 1) is checked\n_formLayoutsPage.formLayoutsPage.radioButton(form, 0).should('be.checked');\n// Verify that the second radio button (Option 2) is not checked\n_formLayoutsPage.formLayoutsPage.radioButton(form, 1).should('not.be.checked');\n// Select the second radio button (Option 2)\n_formLayoutsPage.formLayoutsPage.selectRadioButtonByIndex(form, 1);\n// Verify that the first radio button (Option 1) is no longer checked\n_formLayoutsPage.formLayoutsPage.radioButton(form, 0).should('not.be.checked');\n// Verify that the second radio button (Option 2) is now checked\n_formLayoutsPage.formLayoutsPage.radioButton(form, 1).should('be.checked');\n// Verify that the third radio button (Disabled Option) is disabled\n_formLayoutsPage.formLayoutsPage.radioButton(form, 2).should('be.disabled');\n// Click the \"Sign In\" button to submit the form\n_formLayoutsPage.formLayoutsPage.clickSubmit(form);",
              "err": {},
              "uuid": "18045468-1209-4840-b1fe-65ac6d03e39f",
              "parentUUID": "edf36edc-4e77-4c60-b954-959c73b03247",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should show a warning message after submitting the form when email is not valid",
              "fullTitle": "Form layouts test should show a warning message after submitting the form when email is not valid",
              "timedOut": null,
              "duration": 2256,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// The form title used to locate the correct form card\nconst form = \"Using the Grid\";\n// Input invalid email (without @) into the email field\n_formLayoutsPage.formLayoutsPage.inputEmail(form).type(notEmail);\n// Check that the email field is invalid and the message contains the expected text\n_formLayoutsPage.formLayoutsPage.validateEmailField(form);\n_formLayoutsPage.formLayoutsPage.clickSubmit(form);",
              "err": {},
              "uuid": "f9b0c162-1b18-402f-b71a-ff7727cc4f66",
              "parentUUID": "edf36edc-4e77-4c60-b954-959c73b03247",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should submit Basic Form",
              "fullTitle": "Form layouts test should submit Basic Form",
              "timedOut": null,
              "duration": 4626,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// The form title used to locate the correct form card\nconst form = \"Basic form\";\n// Input invalid email (without @) into the email field\n_formLayoutsPage.formLayoutsPage.inputEmail(form).type(notEmail);\n// Check that the email field is invalid and the message contains the expected text\n_formLayoutsPage.formLayoutsPage.validateEmailField(form);\n// Fill in the \"Email\" input field with a valid email address\n_formLayoutsPage.formLayoutsPage.inputEmail(form).type(email);\n// Fill in the \"Password\" input field with a valid password\n_formLayoutsPage.formLayoutsPage.inputPassword(form).type(password);\n// Check the checkbox\n_formLayoutsPage.formLayoutsPage.clickCheckbox(form);\n_formLayoutsPage.formLayoutsPage.checkBox(form).should('be.checked');\n// Submit the form\n_formLayoutsPage.formLayoutsPage.clickSubmit(form);",
              "err": {},
              "uuid": "182e97fd-1e3b-4116-a6ab-5bafc822fc62",
              "parentUUID": "edf36edc-4e77-4c60-b954-959c73b03247",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should send the Form without labels ",
              "fullTitle": "Form layouts test should send the Form without labels ",
              "timedOut": null,
              "duration": 3754,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// The form title used to locate the correct form card\nconst form = \"Form without labels\";\n// Fill in the \"Recipients\" input field\n_formLayoutsPage.formLayoutsPage.inputRecipients(form).type(recipients);\n// Fill in the \"Subject\" input field\n_formLayoutsPage.formLayoutsPage.inputSubject(form).type(subject);\n// Fill in the \"Message\" input field\n_formLayoutsPage.formLayoutsPage.inputMessage(form).type(message);\n// Submit the form\n_formLayoutsPage.formLayoutsPage.clickSubmit(form);",
              "err": {},
              "uuid": "b54a773c-c61d-4da3-b5b1-768d877ab169",
              "parentUUID": "edf36edc-4e77-4c60-b954-959c73b03247",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should sign in  the Horizontal form",
              "fullTitle": "Form layouts test should sign in  the Horizontal form",
              "timedOut": null,
              "duration": 4145,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// The form title used to locate the correct form card\nconst form = \"Horizontal form\";\n// Input invalid email (without @) into the email field\n_formLayoutsPage.formLayoutsPage.inputEmail(form).type(notEmail);\n// Check that the email field is invalid and the message contains the expected text\n_formLayoutsPage.formLayoutsPage.validateEmailField(form);\n// Fill in the \"Email\" input field with a valid email address\n_formLayoutsPage.formLayoutsPage.inputEmail(form).type(email);\n// Fill in the \"Password\" input field with a valid password\n_formLayoutsPage.formLayoutsPage.inputPassword(form).type(password);\n// Check the checkbox\n_formLayoutsPage.formLayoutsPage.clickCheckbox(form);\n_formLayoutsPage.formLayoutsPage.checkBox(form).should('be.checked');\n// Submit the form\n_formLayoutsPage.formLayoutsPage.clickSubmit(form);",
              "err": {},
              "uuid": "cd0cc488-e9bc-4a63-a686-bffb0f9a357c",
              "parentUUID": "edf36edc-4e77-4c60-b954-959c73b03247",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should submit the Block form",
              "fullTitle": "Form layouts test should submit the Block form",
              "timedOut": null,
              "duration": 3763,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// The form title used to locate the correct form card\nconst form = \"Block form\";\n_formLayoutsPage.formLayoutsPage.inputFirstName(form).type(firstName);\n_formLayoutsPage.formLayoutsPage.inputLastName(form).type(lastName);\n_formLayoutsPage.formLayoutsPage.inputEmail(form).type(email);\n_formLayoutsPage.formLayoutsPage.inputWebsite(form).type(webSite);\n// Submit the form\n_formLayoutsPage.formLayoutsPage.clickSubmit(form);",
              "err": {},
              "uuid": "11e46f85-88e3-4c21-9954-d3a69d371226",
              "parentUUID": "edf36edc-4e77-4c60-b954-959c73b03247",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "82482383-107c-4eee-960f-10730287e100",
            "18045468-1209-4840-b1fe-65ac6d03e39f",
            "f9b0c162-1b18-402f-b71a-ff7727cc4f66",
            "182e97fd-1e3b-4116-a6ab-5bafc822fc62",
            "b54a773c-c61d-4da3-b5b1-768d877ab169",
            "cd0cc488-e9bc-4a63-a686-bffb0f9a357c",
            "11e46f85-88e3-4c21-9954-d3a69d371226"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 28358,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "2cacb5ee-dd5f-44e7-8a51-e660c92ad0a3",
      "title": "",
      "fullFile": "cypress/e2e/stepperPageTest.spec.js",
      "file": "cypress/e2e/stepperPageTest.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b0d11ddc-000c-44fd-9d92-b8e817fd153c",
          "title": "Stepper page test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "big stepper navigation test",
              "fullTitle": "Stepper page test big stepper navigation test",
              "timedOut": null,
              "duration": 3621,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Loop for \"Next\" steps — moving forward\n_stepperPage.StepperPage.stepContents.forEach((content, index) => {\n  // Verify that the current step content matches the expected content\n  _stepperPage.stepperPage.checkContent(STEPPER_INDEX.BIG, content);\n  // After the first step, ensure the checkmark icons for completed steps are visible\n  if (index > 0) {\n    for (let i = 0; i < index; i++) {\n      _stepperPage.stepperPage.checkIconVisibility(i);\n    }\n  }\n  // On the second step, check that the \"Prev\" button is active and clickable\n  if (index === 1) {\n    _stepperPage.stepperPage.checkPrevButtonVisibility(STEPPER_INDEX.BIG, 'false');\n  }\n  // If this is not the last step, click the \"Next\" button to proceed\n  if (index < _stepperPage.StepperPage.stepContents.length - 1) {\n    _stepperPage.stepperPage.clickNext(STEPPER_INDEX.BIG);\n  }\n});\n// Loop for \"Prev\" steps — moving backward\nfor (let i = _stepperPage.StepperPage.stepContents.length - 1; i > 0; i--) {\n  // Ensure the \"Prev\" button is active\n  _stepperPage.stepperPage.checkPrevButtonVisibility(STEPPER_INDEX.BIG, 'false');\n  // Click the \"Prev\" button to go to the previous step\n  _stepperPage.stepperPage.clickPrev(STEPPER_INDEX.BIG);\n  // Validate that the icon shows the correct step number after moving back\n  _stepperPage.stepperPage.checkStepIndices(STEPPER_INDEX.BIG, 0, i);\n  // Check that the current step content matches the expected content\n  _stepperPage.stepperPage.checkContent(STEPPER_INDEX.BIG, _stepperPage.StepperPage.stepContents[i - 1]);\n  // On the first step, verify that the \"Prev\" button is disabled\n  if (i === 1) {\n    _stepperPage.stepperPage.checkPrevButtonVisibility(STEPPER_INDEX.BIG, 'true');\n  }\n}",
              "err": {},
              "uuid": "817a2e37-aadc-4187-976c-563f43f42559",
              "parentUUID": "b0d11ddc-000c-44fd-9d92-b8e817fd153c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Left stepper navigation test",
              "fullTitle": "Stepper page test Left stepper navigation test",
              "timedOut": null,
              "duration": 2657,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Type the user's name in the input field\n_stepperPage.stepperPage.typeInput('User name');\n// Click the \"Next\" button on the first step\n_stepperPage.stepperPage.clickNext(STEPPER_INDEX.LEFT);\n// Ensure the checkmark icon for the completed step is visible and the \"Prev\" button is visible\n_stepperPage.stepperPage.checkIconVisibility(0);\n_stepperPage.stepperPage.checkPrevButtonVisibility(STEPPER_INDEX.LEFT, 'false');\n// Enter the favorite movie\n_stepperPage.stepperPage.typeInput('My favorite movie');\n// Click the \"Next\" button on the second step\n_stepperPage.stepperPage.clickNext(STEPPER_INDEX.LEFT);\n// Ensure the checkmark icon for the second step is visible\n_stepperPage.stepperPage.checkIconVisibility(1);\n// Enter the text in the input field\n_stepperPage.stepperPage.typeInput('something text');\n// Click the \"Confirm\" button\n_stepperPage.stepperPage.clickConfirm();\n// Verify the completion message appears\ncy.get('div').find('h3').contains('Wizard completed!');\n// Click the \"Try again\" button and \n_stepperPage.stepperPage.clickTryAgain();\n//check that the step indices are correct\nfor (let i = 0; i <= 2; i++) {\n  _stepperPage.stepperPage.checkStepIndices(STEPPER_INDEX.LEFT, i, i + 1);\n  _stepperPage.stepperPage.checkStepIndices(STEPPER_INDEX.LEFT, i, i + 1);\n  _stepperPage.stepperPage.checkStepIndices(STEPPER_INDEX.LEFT, i, i + 1);\n}",
              "err": {},
              "uuid": "9e4819fb-020f-45ed-b0ee-2615829a85ec",
              "parentUUID": "b0d11ddc-000c-44fd-9d92-b8e817fd153c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Right stepper navigation test",
              "fullTitle": "Stepper page test Right stepper navigation test",
              "timedOut": null,
              "duration": 3923,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Loop for \"Next\" steps — moving forward\n_stepperPage.StepperPage.stepContents.forEach((content, index) => {\n  // Check that the current step content matches the expected content\n  _stepperPage.stepperPage.checkContent(2, content);\n  // After the first step, ensure the checkmark icons for completed steps are visible\n  if (index > 0) {\n    for (let i = 0; i < index; i++) {\n      _stepperPage.stepperPage.checkIconVisibility(i);\n    }\n  }\n  // On the second step, check that the \"Prev\" button is active and clickable\n  if (index === 1) {\n    _stepperPage.stepperPage.checkPrevButtonVisibility(STEPPER_INDEX.RIGHT, 'false');\n  }\n  // If this is not the last step, click the \"Next\" button to proceed\n  if (index < _stepperPage.StepperPage.stepContents.length - 1) {\n    _stepperPage.stepperPage.clickNext(STEPPER_INDEX.RIGHT);\n  }\n});\n// Loop for \"Prev\" steps — moving backward\nfor (let i = _stepperPage.StepperPage.stepContents.length - 1; i > 0; i--) {\n  // Ensure the \"Prev\" button is active\n  _stepperPage.stepperPage.checkPrevButtonVisibility(STEPPER_INDEX.RIGHT, 'false');\n  // Click the \"Prev\" button to go to the previous step\n  _stepperPage.stepperPage.clickPrev(STEPPER_INDEX.RIGHT);\n  // Validate that the icon shows the correct step number after moving back\n  _stepperPage.stepperPage.checkStepIndices(STEPPER_INDEX.RIGHT, 0, i);\n  // Check that the current step content matches the expected content\n  _stepperPage.stepperPage.checkContent(2, _stepperPage.StepperPage.stepContents[i - 1]);\n  // On the first step, verify that the \"Prev\" button is disabled\n  if (i === 1) {\n    _stepperPage.stepperPage.checkPrevButtonVisibility(STEPPER_INDEX.RIGHT, 'true');\n  }\n}",
              "err": {},
              "uuid": "2e241888-2c87-4185-97f8-3a3af51a921a",
              "parentUUID": "b0d11ddc-000c-44fd-9d92-b8e817fd153c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "817a2e37-aadc-4187-976c-563f43f42559",
            "9e4819fb-020f-45ed-b0ee-2615829a85ec",
            "2e241888-2c87-4185-97f8-3a3af51a921a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10201,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "2eba6086-483e-48db-8476-4372fb1076ab",
      "title": "",
      "fullFile": "cypress/e2e/windowPageTest.spec.js",
      "file": "cypress/e2e/windowPageTest.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a7c6271c-f04c-42ad-94d2-2159d9b3e1d4",
          "title": "Window Page Test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should minimeze / maximize the window",
              "fullTitle": "Window Page Test should minimeze / maximize the window",
              "timedOut": null,
              "duration": 3761,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const titleCard = \"Window Form\";\nconst titleButton = \"Open window form\";\n// Open dialog and validate its visibility\n_windowPage.windowPage.clickOpenWindowButton(titleCard, titleButton);\n_windowPage.windowPage.windowCard().should('be.visible');\n// Minimize the window and validate that it is minimized and visible\n_windowPage.windowPage.clickMinusButton();\n_windowPage.windowPage.windowCard().should('be.visible');\n_windowPage.windowPage.windowCard().should('have.class', 'ng-star-inserted minimized');\n//maximize the window and validate that it is maximized\n_windowPage.windowPage.clickMinusButton();\n_windowPage.windowPage.windowCard().should('be.visible');\n_windowPage.windowPage.windowCard().should('not.have.class', 'ng-star-inserted minimized').and('have.class', 'full-screen');",
              "err": {},
              "uuid": "6f88cb2a-df08-4571-a6f1-e909d4e0c140",
              "parentUUID": "a7c6271c-f04c-42ad-94d2-2159d9b3e1d4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6f88cb2a-df08-4571-a6f1-e909d4e0c140"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3761,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f45219b2-f3a4-4ebf-b413-bed49ed536d3",
      "title": "",
      "fullFile": "cypress/e2e/accordionPageTest.spec.js",
      "file": "cypress/e2e/accordionPageTest.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fa26d204-9888-469d-a5ce-66604bb0a285",
          "title": "Accordion page test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Toggle Button test",
              "fullTitle": "Accordion page test Toggle Button test",
              "timedOut": null,
              "duration": 2487,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let indexAccordion = 0; // Index of the accordion\nlet indexItem = 0; // Index of the accordion item\n// Verify initial state\n_accordionPage.accordionPage.IsItemCollapsed(indexAccordion, indexItem);\n_accordionPage.accordionPage.isTextNotVisible(indexAccordion, indexItem);\n_accordionPage.accordionPage.isChevronDown(indexAccordion, indexItem);\n// First click to expand\n_accordionPage.accordionPage.clickButtonToggle();\n// Verify expanded state\n_accordionPage.accordionPage.IsItemExpanded(indexAccordion, indexItem);\n_accordionPage.accordionPage.isTextVisible(indexAccordion, indexItem);\n_accordionPage.accordionPage.isChevronUp(indexAccordion, indexItem);\n//Second click to collapse\n_accordionPage.accordionPage.clickButtonToggle();\n// Verify collapsed state again\n_accordionPage.accordionPage.IsItemCollapsed(indexAccordion, indexItem);\n_accordionPage.accordionPage.isTextNotVisible(indexAccordion, indexItem);\n_accordionPage.accordionPage.isChevronDown(indexAccordion, indexItem);",
              "err": {},
              "uuid": "e1519892-3316-4ed5-b022-4745d10c28bf",
              "parentUUID": "fa26d204-9888-469d-a5ce-66604bb0a285",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "accordion functional test",
              "fullTitle": "Accordion page test accordion functional test",
              "timedOut": null,
              "duration": 3747,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const indexAccordion = [0, 1]; // // Indices of the accordions\nconst indexItem = [0, 1, 2]; // Indices of the accordion items\n_navigationPage.navigateTo.accordionsPage(); // Navigate to the accordion page\nfor (const accordion of indexAccordion) {\n  for (const item of indexItem) {\n    // Verify initial state\n    _accordionPage.accordionPage.IsItemCollapsed(accordion, item);\n    _accordionPage.accordionPage.isTextNotVisible(accordion, item);\n    _accordionPage.accordionPage.isChevronDown(accordion, item);\n    //First click to expand\n    _accordionPage.accordionPage.clickAccordionItem(accordion, item);\n    // Verify expanded state\n    _accordionPage.accordionPage.IsItemExpanded(accordion, item);\n    _accordionPage.accordionPage.isTextVisible(accordion, item);\n    _accordionPage.accordionPage.isChevronUp(accordion, item);\n    // Second click to collapse \n    _accordionPage.accordionPage.clickAccordionItem(accordion, item);\n    // Verify collapsed state again\n    _accordionPage.accordionPage.IsItemCollapsed(accordion, item);\n    _accordionPage.accordionPage.isTextNotVisible(accordion, item);\n    _accordionPage.accordionPage.isChevronDown(accordion, item);\n  }\n}",
              "err": {},
              "uuid": "e85f8354-d412-414f-a343-a3ff9dd77af5",
              "parentUUID": "fa26d204-9888-469d-a5ce-66604bb0a285",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e1519892-3316-4ed5-b022-4745d10c28bf",
            "e85f8354-d412-414f-a343-a3ff9dd77af5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6234,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/results/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}